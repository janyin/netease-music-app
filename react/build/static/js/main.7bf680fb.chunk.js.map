{"version":3,"sources":["route/index.js","store/reducer.js","store/store.js","index.js","api/server.js","api/config.js","utils/parse.js","store/action.js"],"names":["Layout","lazy","Player","PlayList","connect","getHomeData","getRankData","getHotWord","useEffect","Promise","all","fallback","toast","text","exact","path","component","to","defaultState","newSong","remd","rank","hotWord","searchResult","playList","curWord","curMusic","playerStatus","middleware","thunk","store","createStore","state","action","type","result","status","applyMiddleware","ReactDOM","render","document","getElementById","get","url","params","resolve","reject","axios","then","res","data","catch","err","offline","getSearchSong","word","getMusicUrl","id","getPlaylist","getMusicDetail","checkMusic","getComment","parseCommentDate","time","date","Date","year","getFullYear","getMonth","getDate","getArtists","artists","length","name","response","playlist","tracks","slice","map","index","ar","alia","al","color","title","alias","album","picUrl","play","playCount","toString","imgUrl","playListSong","value","artistsName","tags","desc","description","music","coverImgUrl","search","songs","dispatch","a","newSongResponse","remdResponse","song","PARSE","hots","API","getState","clearSearchSong","setCurWord","trim","setCurMusic","success","resData","musicUrl","comment","hotComments","content","likedCount","user","username","nickname","avatarUrl","setPlayerStatus"],"mappings":"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","file":"static/js/main.7bf680fb.chunk.js","sourcesContent":["import { getHomeData, getHotWord, getRankData } from '@/store/action';\nimport { ActivityIndicator } from 'antd-mobile';\nimport React, { lazy, Suspense, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { HashRouter, Redirect, Route, Switch } from 'react-router-dom';\n\nconst Layout = lazy(() => import('@/page/layout/index'));\nconst Player = lazy(() => import('@/page/player/index'));\nconst PlayList = lazy(() => import('@/page/playlist/index'));\n\n/**\n * 路由配置组件\n * @author janyin\n */\nfunction RouteConfig({ getHomeData, getRankData, getHotWord }) {\n  useEffect(() => {\n    function getInitData() {\n      Promise.all([getHomeData(), getRankData(), getHotWord()]);\n    }\n    getInitData();\n    // eslint-disable-next-line\n  }, []);\n\n  return (\n    <HashRouter>\n      <Suspense fallback={<ActivityIndicator toast text=\"loading\" />}>\n        <Switch>\n          <Route exact path=\"/\" component={Layout} />\n          <Route path=\"/playlist\" component={PlayList} />\n          <Route path=\"/player\" component={Player} />\n          <Redirect to=\"/\" />\n        </Switch>\n      </Suspense>\n    </HashRouter>\n  );\n}\n\nexport default connect(null, {\n  getHomeData,\n  getRankData,\n  getHotWord,\n})(RouteConfig);\n","const defaultState = {\n  newSong: [], // 最新音乐\n  remd: [], // 推荐歌单\n  rank: [], // 排行榜歌曲\n  hotWord: [], // 搜索热词\n  searchResult: [], // 搜索结果\n  playList: {}, // 推荐歌单详情\n  curWord: '', // 当前搜索输入值\n  curMusic: {}, // 当前播放音乐信息\n  playerStatus: false, // 播放状态\n};\n\nexport default function reducer(state = defaultState, action) {\n  switch (action.type) {\n    case 'SET_HOMEDATA': {\n      return {\n        ...state,\n        ...action.result,\n      };\n    }\n    case 'SET_RANKDATA': {\n      return {\n        ...state,\n        rank: action.result,\n      };\n    }\n    case 'SET_HOTWORD': {\n      return {\n        ...state,\n        hotWord: action.result,\n      };\n    }\n    case 'SET_PLAYLIST': {\n      return {\n        ...state,\n        playList: action.result,\n      };\n    }\n    case 'GET_SEARCHSONG': {\n      return {\n        ...state,\n        searchResult: action.result,\n      };\n    }\n    case 'SET_CURWORD': {\n      return {\n        ...state,\n        curWord: action.curWord,\n      };\n    }\n    case 'CLEAR_SEARCH': {\n      return {\n        ...state,\n        searchResult: [],\n        curWord: '',\n      };\n    }\n    case 'SET_MUSICINFO': {\n      return {\n        ...state,\n        curMusic: action.result,\n      };\n    }\n    case 'SET_PLAYERSTATUS': {\n      return {\n        ...state,\n        playerStatus: action.status,\n      };\n    }\n    default: {\n      return state;\n    }\n  }\n}\n","import { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport reducer from './reducer';\n\nconst middleware = [thunk];\n\nconst store = createStore(reducer, applyMiddleware(...middleware));\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Router from '@/route/index';\nimport { Provider } from 'react-redux';\nimport store from '@/store/store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <Router />\n  </Provider>,\n  document.getElementById('root'),\n);\n","import axios from 'axios';\nimport { Toast } from 'antd-mobile';\n\nconst HOST = 'https://api.mtnhao.com';\n\nexport const get = (url, params) =>\n  new Promise((resolve, reject) => {\n    axios\n      .get(HOST + url, {\n        params,\n      })\n      .then((res) => {\n        resolve(res.data);\n      })\n      .catch((err) => {\n        Toast.offline('网络错误');\n        reject(err.data);\n      });\n  });\n","import { get } from './server';\n\n/**\n * 搜索热词\n */\nexport const getWord = () => get('/search/hot');\n\n/**\n * 搜索歌曲\n */\nexport const getSearchSong = (word) => get(`/search?keywords=${word}`);\n\n/**\n * 歌曲排行榜\n */\nexport const getRank = () => get('/playlist/detail?id=3778678');\n\n/**\n * 推荐歌曲列表\n */\nexport const getRemd = () => get('/personalized');\n\n/**\n * 最新歌曲列表\n */\nexport const getNewSong = () => get('/personalized/newsong');\n\n/**\n * 音乐播放url\n */\nexport const getMusicUrl = (id) => get(`/song/url?id=${id}`);\n\n/**\n * 推荐歌单\n */\nexport const getPlaylist = (id) => get(`/playlist/detail?id=${id}`);\n\n/**\n * 音乐详情\n */\nexport const getMusicDetail = (id) => get(`/song/detail?ids=${id}`);\n\n/**\n * 检测歌曲是否可播放？（版权/会员限制）\n */\nexport const checkMusic = (id) => get(`/check/music?id=${id}`);\n\n/**\n * 获取歌曲歌词\n */\nexport const getLrc = (id) => get(`/lyric?id=${id}`);\n\n/**\n * 获取歌曲热门评论\n */\nexport const getComment = (id) => get(`/comment/hot?id=${id}&type=0`);\n","/**\n * 评论时间处理,如果是2020年则不显示年份\n * @param {Number} time 自1970年1月1日00:00:00 UTC（the Unix epoch）以来的毫秒数\n * @returns 返回评论的时间\n */\nfunction parseCommentDate(time) {\n  const date = new Date(time);\n  const year = date.getFullYear() === 2020 ? '' : `${date.getFullYear()}年`;\n  return `${year}${date.getMonth() + 1}月${date.getDate()}日`;\n}\n\n/**\n * 一首歌多个歌手的情况\n * @param {Array} artists 歌手数组\n * @returns 返回歌手名字字符串\n */\nfunction getArtists(artists) {\n  if (artists.length >= 2) {\n    return `${artists[0].name}/${artists[1].name}`;\n  }\n  return artists[0].name;\n}\n\n/**\n * 新歌推荐数据\n * @param {*} response \n * @returns \n */\nexport const newSong = (response) => {\n  return response.result.map(({ song: { artists, album }, id, name }) => ({\n    id,\n    title: name,\n    artists: getArtists(artists),\n    album: album.name,\n  }));\n}\n  \n/**\n * 排行榜页面数据\n * @param {*} response \n * @returns \n */\nexport const rank = (response) => {\n  return response.playlist.tracks\n    .slice(0, 20)\n    .map(({ ar, id, name, alia, al }, index) => {\n      let color = false;\n      // 前三歌曲加粗\n      if (index <= 2) color = true;\n\n      // 前9歌曲序号加0\n      if (index <= 8) {\n        return {\n          id,\n          title: name,\n          alias: alia[0],\n          artists: getArtists(ar),\n          album: al.name,\n          rank: `0${index + 1}`,\n          color,\n        };\n      }\n\n      return {\n        id,\n        title: name,\n        alias: alia[0],\n        artists: getArtists(ar),\n        album: al.name,\n        rank: index + 1,\n        color,\n      };\n    });\n}\n/**\n * 推荐歌单列表\n * @param {*} response \n * @returns \n */\nexport const remd = (response) => {\n  return response.result.slice(0, 6).map(({ id, name, picUrl, playCount }) => {\n    let play = playCount.toString();\n\n    if (play.length >= 6) {\n      play = `${play[0] + play[1]}万`;\n    }\n\n    return {\n      id,\n      name,\n      imgUrl: picUrl,\n      play,\n    };\n  });\n}\n/**\n * 歌单详情页\n * @param {*} response \n * @returns \n */\nexport const playList = (response) => {\n  const playListSong = response.playlist.tracks\n    .slice(0, 25)\n    .map((value, index) => {\n      let artistsName = '';\n      const { ar, id, name, alia, al } = value;\n\n      if (ar.length >= 2) {\n        artistsName = `${ar[0].name}/${ar[1].name}`;\n      } else {\n        artistsName = ar[0].name;\n      }\n\n      return {\n        id,\n        title: name,\n        alias: alia[0],\n        artists: artistsName,\n        album: al.name,\n        rank: index + 1,\n      };\n    });\n\n  const { id, tags, description, name, coverImgUrl } = response.playlist;\n\n  return {\n    id,\n    tags,\n    desc: description,\n    music: playListSong,\n    name,\n    imgUrl: coverImgUrl,\n  };\n};\n/**\n * 搜索结果\n * @param {*} response \n */\nexport const search = (response) => {\n  return response.result.songs.map(({ artists, id, name, alias, album }) => ({\n    id,\n    title: name,\n    alias: alias[0],\n    artists: getArtists(artists),\n    album: album.name,\n  }));\n}\n/**\n * 歌曲评论\n * @param {*} data \n * @returns \n */\nexport const comment = (data) => {\n  return data.map(({ content, likedCount, user: { nickname, avatarUrl }, time }) => ({\n    content,\n    likedCount,\n    username: nickname,\n    avatarUrl,\n    time: parseCommentDate(time),\n  }));\n}","import * as API from '@/api/config';\nimport * as PARSE from '@/utils/parse';\n\n/**\n * Home页面的数据请求\n * @author janyin\n */\nexport const getHomeData = () => async (dispatch) => {\n  const newSongResponse = await API.getNewSong();\n  const remdResponse = await API.getRemd();\n  dispatch({\n    type: 'SET_HOMEDATA',\n    result: {\n      newSong: PARSE.newSong(newSongResponse),\n      remd: PARSE.remd(remdResponse),\n    },\n  });\n};\n\n/**\n * Rank页面的数据请求\n */\nexport const getRankData = () => async (dispatch) => {\n  const response = await API.getRank();\n  dispatch({\n    type: 'SET_RANKDATA',\n    result: PARSE.rank(response),\n  });\n};\n\n/**\n * 搜索热词的数据请求\n */\nexport const getHotWord = () => async (dispatch) => {\n  const response = await API.getWord();\n  dispatch({\n    type: 'SET_HOTWORD',\n    result: response.result.hots,\n  });\n};\n\n/**\n * 获取播放歌单详情数据\n * @param {number} id\n */\nexport const getPlaylist = (id) => async (dispatch) => {\n  const response = await API.getPlaylist(id);\n  dispatch({\n    type: 'SET_PLAYLIST',\n    result: PARSE.playList(response),\n  });\n};\n\n/**\n * 获取搜索结果\n */\nexport const getSearchSong = () => async (dispatch, getState) => {\n  const word = getState().curWord;\n  const response = await API.getSearchSong(word);\n  dispatch({\n    type: 'GET_SEARCHSONG',\n    result: PARSE.search(response),\n  });\n};\n\n/**\n * 清空搜索结果\n */\nexport const clearSearchSong = () => ({\n  type: 'CLEAR_SEARCH',\n});\n\n/**\n * 设置当前搜索框的值\n * @param {String} word 搜索词\n */\nexport const setCurWord = (word) => ({\n  type: 'SET_CURWORD',\n  curWord: word.trim(),\n});\n\n/**\n * 获取歌曲播放数据\n * @param {Object} music 歌曲信息\n */\nexport const setCurMusic = (music) => async (dispatch) => {\n  const { id, artists, title } = music;\n  const { success } = await API.checkMusic(id);\n  if (success) {\n    const resData = await Promise.all([\n      API.getMusicUrl(id),\n      API.getComment(id),\n      API.getMusicDetail(id),\n    ]);\n\n    const musicUrl = resData[0].data[0].url;\n    const imgUrl = resData[2].songs[0].al.picUrl;\n\n    if (!musicUrl) {\n      return 'DISABLEMUSIC';\n    }\n    dispatch({\n      type: 'SET_MUSICINFO',\n      result: {\n        id,\n        musicUrl,\n        imgUrl,\n        artists,\n        title,\n        comment: PARSE.comment(resData[1].hotComments),\n      },\n    });\n  } else {\n    return 'DISABLEMUSIC';\n  }\n  return 'success';\n};\n\n/**\n * 设置播放状态\n * @param {Boolean} status 播放状态\n */\nexport const setPlayerStatus = (status) => ({\n  type: 'SET_PLAYERSTATUS',\n  status,\n});\n"],"sourceRoot":""}